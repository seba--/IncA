/*
 * generated by Xtext 2.12.0
 */
package org.inca.integration.souffle.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.inca.integration.souffle.lang.LangPackage
import org.inca.integration.souffle.lang.RuleApplication
import org.inca.integration.souffle.lang.RuleDefinition

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class LangScopeProvider extends AbstractLangScopeProvider {

	override getScope(EObject context, EReference reference) {
		if (reference == LangPackage.Literals.VARIABLE_REFERENCE__VARIABLE) {
			val rule = EcoreUtil2.getContainerOfType(context, RuleDefinition);
			if (rule !== null) {
				return new VariableDeclaringScope(Scopes.scopeFor(rule.variables), rule);
			}
			return IScope.NULLSCOPE
		}
		if (reference == LangPackage.Literals.RULE_APPLICATION__RULE) {
			if (context instanceof RuleApplication) {
				val ref = context.componentReference
				if (ref !== null) {
					return Scopes.scopeFor(ref.composite.contents)
				}
			}
		}
		return super.getScope(context, reference)
	}

}
